repeats = repeats,
classProbs = FALSE)
exParedTrain <- exTrain[,c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
# NOte: I found by looking at the data in a spreadsheet, that the
exParedTest <- exTest[c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
knitr::opts_chunk$set(echo = TRUE)
exTrain <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-training.csv')
exTest <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-testing.csv')
head(exTrain)
exTrain <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-training.csv')
exTest <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-testing.csv')
head(exTrain)
exParedTrain <- exTrain[,c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
# NOte: I found by looking at the data in a spreadsheet, that the
exParedTest <- exTest[c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
library(caTools)
set.seed(1234)
split <- sample.split(exParedTrain$classe, SplitRatio = 0.80)
exSplitTrain <- subset(exParedTrain, split == TRUE)
exSplitTest <- subset(exParedTrain, split == FALSE)
library(caret)
library(e1071)
repeats = 3
numbers = 10
tunel = 10
set.seed(1234)
Sys.time()
trainValues = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = FALSE)
set.seed(1234)
kmFit <- kmeans(exSplitTrain[,6:59], 5, nstart = 20)
View(exSplitTest)
View(exSplitTest)
set.seed(1234)
kmFit <- kmeans(exSplitTrain[,6:59], centers = 5, nstart = 20)
is.na(exParedTrain)
colnames(exParedTrain)[colSums(is.na(exParedTrain)) > 0]
colnames(exParedTrain)[colSums(is.na(exParedTrain))]
colnames(exParedTrain)
colnames(exSplitTrain)[colSums(is.name(exSplitTrain)) > 0]
colnames(exSplitTrain)[colSums(is.na(exSplitTrain)) > 0]
set.seed(1234)
kmFit <- kmeans(exSplitTrain[,6:59], centers = 5, nstart = 20)
colSums(is.na(exTrain))
colSums(is.na(exSplitTrain))
set.seed(1234)
kmFit <- kmeans(exSplitTrain[,7:59], centers = 5, nstart = 20)
table(kmFit$cluster, exSplitTrain$classe)
kmFit
kmFit$cluster
summary(kmFit)
set.seed(1234)
kmFit <- kmeans(exSplitTrain[,7:59], centers = 5, nstart = 20, method = "classes")
set.seed(1234)
kmFit <- kmeans(exSplitTrain[,7:59], centers = 5, nstart = 20, method = c("classes", "centers"))
set.seed(1234)
kmFit <- kmeans(exSplitTrain[,7:59], centers = 5, nstart = 20)
table(kmFit$cluster, exSplitTrain$classe)
library(e1071)
svmModel <- svm(formula = classe ~ .,
data = exSplitTrain,
type = 'C-classification',
kernel = 'polynomial')
SvmPred = predict(svmModel, newdata = exSplitTest)
SvmPred
table(svmPred, exSplitTest$classe)
table(SvmPred, exSplitTest$classe)
knitr::opts_chunk$set(echo = TRUE)
exTrain <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-training.csv')
exTest <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-testing.csv')
head(exTrain)
exTrain <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-training.csv')
exTest <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-testing.csv')
head(exTrain)
exParedTrain <- exTrain[,c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
# NOte: I found by looking at the data in a spreadsheet, that the
exParedTest <- exTest[c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
library(caTools)
set.seed(1234)
split <- sample.split(exParedTrain$classe, SplitRatio = 0.80)
exSplitTrain <- subset(exParedTrain, split == TRUE)
exSplitTest <- subset(exParedTrain, split == FALSE)
library(caret)
library(e1071)
repeats = 3
numbers = 10
tunel = 10
set.seed(1234)
Sys.time()
trainValues = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = FALSE)
Sys.time()
rfFit <- train(classe ~ .,
data = exSplitTrain,
method = "rf",
prox = TRUE,
preProcess = c("center","scale"),
trControl = trainValues)
knitr::opts_chunk$set(echo = TRUE)
exTrain <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-training.csv')
exTest <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-testing.csv')
head(exTrain)
exParedTrain <- exTrain[,c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
# NOte: I found by looking at the data in a spreadsheet, that the
exParedTest <- exTest[c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
library(caTools)
set.seed(1234)
split <- sample.split(exParedTrain$classe, SplitRatio = 0.80)
exSplitTrain <- subset(exParedTrain, split == TRUE)
exSplitTest <- subset(exParedTrain, split == FALSE)
library(caret)
library(e1071)
repeats = 3
numbers = 10
tunel = 10
set.seed(1234)
Sys.time()
trainValues = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = FALSE)
Sys.time()
rfFit <- train(classe ~ .,
data = exSplitTrain,
method = "rf",
prox = TRUE,
preProcess = c("center","scale"),
trControl = trainValues)
Sys.time()
rfFit <- train(classe ~ .,
data = exSplitTrain,
method = "rf",
prox = TRUE,
preProcess = c("center","scale"),
trControl = trainValues,
verboseIter = TRUE)
Sys.time()
rfFit
exSplitTestScaled <- scale(exSplitTest[7:59])
rfPred <- predict(rfFit2, exSplitTestScaled)
exSplitTestScaled <- scale(exSplitTest[7:59])
rfPred <- predict(rfFit, exSplitTestScaled)
exSplitTestScaled <- scale(exSplitTest[7:59])
rfPred <- predict(rfFit, exSplitTestScaled)
rfFit
exSplitTestScaled
predict(rfFit, exSplitTestScaled)
knitr::opts_chunk$set(echo = TRUE)
exTrain <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-training.csv')
exTest <- read.csv('E:/LearningModules/Coursera/PracticalMachineLearning/pml-testing.csv')
head(exTrain)
exParedTrain <- exTrain[,c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
# NOte: I found by looking at the data in a spreadsheet, that the
exParedTest <- exTest[c(1:11,37:49,60:68,84:86,102, 113:124,140,151:160)]
library(caTools)
set.seed(1234)
split <- sample.split(exParedTrain$classe, SplitRatio = 0.80)
exSplitTrain <- subset(exParedTrain, split == TRUE)
exSplitTest <- subset(exParedTrain, split == FALSE)
library(caret)
library(e1071)
repeats = 3
numbers = 10
tunel = 10
set.seed(1234)
Sys.time()
trainValues = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = FALSE)
library(caret)
library(e1071)
repeats = 3
numbers = 10
tunel = 10
set.seed(1234)
Sys.time()
trainValues = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = FALSE)
library(caret)
library(e1071)
repeats = 3
numbers = 10
tunel = 10
set.seed(1234)
trainValues = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = FALSE)
set.seed(1234)
kmFit <- kmeans(exSplitTrain[,7:59], 5, nstart = 20)
table(kmFit$cluster, exSplitTrain$classe)
library(e1071)
svmModel <- svm(formula = classe ~ .,
data = exSplitTrain,
type = 'C-classification',
kernel = 'polynomial')
SvmPred = predict(svmModel, newdata = exSplitTest)
SvmPred
table(exSplitTest$classe, SvmPred)
exTrain.m <- melt(exTrain)
library(reshape2)
exTrain.m <- melt(exTrain)
library(plyr)
exTrain.m <- ddply(exTrain.m, .(variable), transform, rescale = rescale(value))
library(scales)
exTrain.m <- ddply(exTrain.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(exTrain.m, aes(variable, classe))
p
p = p + geom_tile(aes(fill = rescale), colour = "white")
p
exTrainOrd <- exTrain[order(exTrain$classe),]
p <- p + scale_fill_gradient(low = "white", high = "steelblue")
p
p <- ggplot(exTrain.m, aes(classe, variable))
p = p + geom_tile(aes(fill = rescale), colour = "white")
p <- p + scale_fill_gradient(low = "white", high = "steelblue")
p
exTrainMatrix <- data.matrix(exTrainOrd)
ex_heatmap <- heatmap(exTrainMatrix, Rowv = NA, Colv=NA, col = cm.colors(256), scale = "column", margins=c(5,10))
ex_heatmap
p
exTrain.m <- melt(exParedTrain)
exTrain.m <- ddply(exTrain.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(exTrain.m, aes(classe, variable))
p = p + geom_tile(aes(fill = rescale), colour = "white")
p <- p + scale_fill_gradient(low = "white", high = "steelblue")
p
plt <- ggplot(exParedTrain, aes(y = total_accel_forearm, x = total_accel_dumbbell,
color = classe, size = total_accel_arm, shape=total_accel_belt))
plt = plt + geom_point()
plt = plt + scale_size_discrete(range = c(4,6))
plt
plt <- ggplot(exParedTrain, aes(y= total_accel_forearm, x = total_accel_dumbbell,
color = classe, size = total_accel_arm))
plt = plt + geom_point()
plt = plt + scale_size_discrete(range = c(4,6))
plt
p
View(exParedTrain)
View(exParedTrain)
exParedTotals <- exParedTrain[,c('user_name', 'classe', 'total_accel_belt',
'total_accel_arm', 'total_accel_dumbbell', 'total_accel_forearm')]
par(mfrow = c(6,6))
with(subset(exPairedTrain, classe = 'A', plot(total_accel_belt, total_accel_arm, main = 'A')
)
)
with(subset(exParedTrain, class = 'A'), plot(total_accel_belt, total_accel_arm, main = 'A'))
par(mfrow = c(4,4), mar = c(5,4,2,1))
with(subset(exParedTrain, class = 'A'), plot(total_accel_belt, total_accel_arm, main = 'A'))
with(subset(exParedTrain, class = 'A'), plot(total_accel_dumbbell, total_accel_forearm, main = 'A'))
with(subset(exParedTrain, class = 'B'), plot(total_accel_belt, total_accel_arm, main = 'B'))
with(subset(exParedTrain, class = 'B'), plot(total_accel_dumbbell, total_accel_forearm, main = 'B'))
with(subset(exParedTrain, class = ''), plot(total_accel_belt, total_accel_arm, main = 'B'))
with(subset(exParedTrain, class = 'C'), plot(total_accel_belt, total_accel_arm, main = 'C'))
with(subset(exParedTrain, class = ''), plot(total_accel_dumbbell, total_accel_forearm, main = 'B'))
par(mfrow = c(4,3), mar = c(5,4,2,1))
with(subset(exParedTrain, class = 'A'), plot(total_accel_belt, total_accel_arm, main = 'A'))
with(subset(exParedTrain, class = 'A'), plot(total_accel_dumbbell, total_accel_forearm, main = 'A'))
with(subset(exParedTrain, class = 'B'), plot(total_accel_belt, total_accel_arm, main = 'B'))
with(subset(exParedTrain, class = 'B'), plot(total_accel_dumbbell, total_accel_forearm, main = 'B'))
with(subset(exParedTrain, class = 'C'), plot(total_accel_belt, total_accel_arm, main = 'C'))
with(subset(exParedTrain, class = 'C'), plot(total_accel_dumbbell, total_accel_forearm, main = 'C'))
with(subset(exParedTrain, class = 'D'), plot(total_accel_belt, total_accel_arm, main = 'D'))
with(subset(exParedTrain, class = 'D'), plot(total_accel_dumbbell, total_accel_forearm, main = 'D'))
with(subset(exParedTrain, class = 'E'), plot(total_accel_belt, total_accel_arm, main = 'E'))
with(subset(exParedTrain, class = 'E'), plot(total_accel_dumbbell, total_accel_forearm, main = 'E'))
par(mfrow = c(3,4), mar = c(5,4,2,1))
with(subset(exParedTrain, class = 'A'), plot(total_accel_belt, total_accel_arm, main = 'A'))
with(subset(exParedTrain, class = 'A'), plot(total_accel_dumbbell, total_accel_forearm, main = 'A'))
with(subset(exParedTrain, class = 'B'), plot(total_accel_belt, total_accel_arm, main = 'B'))
with(subset(exParedTrain, class = 'B'), plot(total_accel_dumbbell, total_accel_forearm, main = 'B'))
with(subset(exParedTrain, class = 'C'), plot(total_accel_belt, total_accel_arm, main = 'C'))
with(subset(exParedTrain, class = 'C'), plot(total_accel_dumbbell, total_accel_forearm, main = 'C'))
with(subset(exParedTrain, class = 'D'), plot(total_accel_belt, total_accel_arm, main = 'D'))
with(subset(exParedTrain, class = 'D'), plot(total_accel_dumbbell, total_accel_forearm, main = 'D'))
with(subset(exParedTrain, class = 'E'), plot(total_accel_belt, total_accel_arm, main = 'E'))
with(subset(exParedTrain, class = 'E'), plot(total_accel_dumbbell, total_accel_forearm, main = 'E'))
boxplot(total_accel_belt ~ classe, xlab = 'Class', ylab = 'Total Belt Acceleration')
boxplot(total_accel_belt ~ classe, exParedTrain, xlab = 'Class', ylab = 'Total Belt Acceleration')
names(exParedTotals)
par(mfrow = c(2,2), mar = c(5,4,2,1))
boxplot(total_accel_belt ~ classe, exParedTrain, xlab = 'Class', ylab = 'Total Belt Acceleration', col = "blue")
boxplot(total_accel_arm ~ classe, exParedTrain, xlab = 'Class', ylab = 'Total Arm Acceleration', col = "blue")
boxplot(total_accel_dumbbell ~ classe, exParedTrain, xlab = 'Class', ylab = 'Total Dumbbell Acceleration', col = "blue")
boxplot(total_accel_forearm ~ classe, exParedTrain, xlab = 'Class', ylab = 'Total Forearm Acceleration', col = "blue")
library(devtools)
install.packages('devtools')
library(devtools)
install_github('slidifyLibraryies','ramnathv')
install_github('slidifyLibraries','ramnathv')
install_github("ramnathv/slidifyLibraries")
install_github("ramnathv/slidify")
install.Rtools
library(slidify)
author('fattyAcids')
setwd('C:/Users/anne.racel/Documents/fattyAcids')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
install.packages("webshot")
slidify("index.Rmd")
library(webshot)
webshot::install_phantomjs()
webshot::install_phantomjs()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(ggplot2)
library(caret)
data("oil")
oilNames <- c(Pumpkin","Sunflower","Peanut","Olive","Soybean","Rapeseed","Corn")
oilNames <- c("Pumpkin","Sunflower","Peanut","Olive","Soybean","Rapeseed","Corn")
oil <- fattyAcids
oil$Type <- oilType
levels(oil$Type) <- c(levels(oilNames))
oil$Type <- replace.value(oil,c("Type"), from = "A", to="Pumpkin")
install.packages("ancors")
install.packages("anchors")
oil$Type <- replace.value(oil,c("Type"), from = "A", to="Pumpkin")
library(anchors)
oil$Type <- replace.value(oil,c("Type"), from = "A", to="Pumpkin")
View(oil)
oil <- fattyAcids
oil$Type <- oilType
oil$Type <- replace(oil$Type, oil$Type == 'A', 'Pumpkin')
oil$Type <- oilType
oil$Type <- replace(oil$Type, level(oil$Type) == 'A', level('Pumpkin'))
oil$Type <- replace(oil$Type, levels(oil$Type) == 'A', levels('Pumpkin'))
oil$Type <- replace(oil$Type, c('A','B','C','D','E','F','G'), c("Pumpkin","Sunflower","Peanut","Olive","Soybean","Rapeseed","Corn"))
oil$Type <- replace(oil$Type, c(1,2,3,4,5,6,7), c("Pumpkin","Sunflower","Peanut","Olive","Soybean","Rapeseed","Corn"))
oil$Type <- oilType
oil$Type <- replace(oil$Type, c(1,2,3,4,5,6,7), c("Pumpkin","Sunflower","Peanut","Olive","Soybean","Rapeseed","Corn"))
oilType
oil$Type <- replace(oil$Type, c(1,2,3,4,5,6,7), c('Pumpkin','Sunflower','Peanut','Olive','Soybean','Rapeseed','Corn'))
oil$Type <- oilType
oil$Type <- replace(oil$Type, c(1), c('Pumpkin'))
letters
oil$Type <- oilType
oil$Type <- as.number(oil$Type)
oil$Type <- as.numeric(oil$Type)
oil$Type <- replace(oil$Type, c(1), c('Pumpkin'))
oil$Type <- replace.value(oil, Type, c(1), c('Pumpkin'))
oil$Type <- replace.value(oil, c('Type'), c(1), c('Pumpkin'))
oil$Type <- oilType
oil$Type <- as.numeric(oil$Type)
oil$Type <- replace(oil$Type, c(1), c('Pumpkin'))
oil$Type <- replace(oil$Type, c(1), c('Pumpkin'))
oil$Type
oil$Type <- replace(oil$Type, c("1"), c('Pumpkin'))
oilType
oil$Type <- oilType
oil$Type <- replace(oil$Type, levels(1), levels('Pumpkin'))
oil$Type <- replace(oil$Type, levels('A'), levels('Pumpkin'))
oil$Type <- as.numeric(oil$Type)
oil$Type <- replace(oil$Type, levels(1), levels('Pumpkin'))
oil$Type <- replace(oil$Type, levels('Pumpkin'))
oil$Type <- replace(oil$Type, c(1), levels('Pumpkin'))
oil$Type <- replace(oil$Type, c(1), c('Pumpkin'))
oil$Type <- replace(oil$Type, c(1), c('Pumpkin'))
head(oil)
oil$Type <- replace(oil$Type, 1, c('Pumpkin'))
oil$Type <- replace(oil$Type, 1, c('Pumpkin'))
oil$Type <- replace(oil$Type, c(2), c('Sunflower'))
oil$Type <- oilType
oil$Type <- replace(oil, c('Type'), c('A'), c('Pumpkin'))
oil$Type <- replace(oil, c("Type"), "A", "Pumpkin")
oil$Type <- replace(oil, "A", "Pumpkin")
oil$Type <- oilType
oil$Type <- replace(oil, "A", levels('Pumpkin'))
oil$Type <- oilType
oily <- data.frame("A" = "Pumpkin", "B" = "Sunflower", "C" = "Peanut",
"D" = "Olive", "E" = "Soybean", "F" = "Rapeseed",
"G" = "Corn")
library(dplyr)
data %>%
;
oil$Type %>% mutate(var = replace(var, var == 'A', "Pumpkin"))
non_oil <- setdiff(levels(oil$Type, "A"))
non_oil <- setdiff(levels(oil$Type), 'A')
levels(oil$Type) <- oilNames
oilNames
oil <- oil[order(Type),]
oil <- oil[order(oil$Type),]
heatmap(oil)
library(plotly)
data <- as.matrix(oil)
plot_ly(x=colnames(data), y = rownames(data), z = data, type="heatmap")
heatmap(data, Colv = NA, Rowv = NA, scale = "column")
View(data)
plot_ly(x=colnames(data), y = data$Type, z = data, type="heatmap")
p <- ggplot(oil, aes(colnames(oil), oil$Type))
plot_ly(x=colnames(data), y = data$Type, z = data, type="heatmap")
plot_ly(x=colnames(data), y = data[8] , z = data, type="heatmap")
data <- oil
data$Type <- as.numeric(data$Type)
heatmap(data, Colv = NA, RowV = Na, scale = "column")
data <- as.matrix(data)
heatmap(data, Colv = NA, RowV = Na, scale = "column")
heatmap(data, Colv = NA, RowV = NA, scale = "column")
data <- oil
data <- oil[order(oil$Type)]
data <- oil[order(oil$Type),]
heatmap(data, Colv = NA, RowV = NA, scale = "column")
data <- as.matrix(data)
heatmap(data, Colv = NA, RowV = NA, scale = "column")
oil <- fattyAcids
oil$Type <- oilType
data <- oil[order(oil$Type),]
data$Type <- as.numeric(data$Type)
data <- as.matrix(data)
heatmap(data, Colv = NA, RowV = NA, scale = "column")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
data <- data.frame()
data <- data.frame()
data <- data.frame(
)
pumpkin <- data.frame(
"Type" = oilNames,
"Palmitic" = c(0,0,0,0,0,0,0),
"Stearic" = c(0,0,0,0,0,0,0),
"Oleic"  = c(0,0,0,0,0,0,0),
"Linoleic"  = c(0,0,0,0,0,0,0),
"Linolenic" = c(0,0,0,0,0,0,0),
"Eicosanoic"  = c(0,0,0,0,0,0,0),
"Eicosenoic" = c(0,0,0,0,0,0,0)
)
library(ddplyr)
library(ddply)
library(reshape2)
melted <- melt(oil, id.vars = c("Type"))
melted
levels(oil$Type) <- oilNames
melted <- melt(oil, id.vars = c("Type"))
ddply(melted, c("Type","variable"), summarize,
mean = mean(value), sd = sd(value),
sem = sd(value/sqrt(length(value))))
library(plyr)
ddply(melted, c("Type","variable"), summarize,
mean = mean(value), sd = sd(value),
sem = sd(value/sqrt(length(value))))
oil_summary <- ddply(melted, c("Type","variable"), summarize,
mean = mean(value), sd = sd(value),
sem = sd(value/sqrt(length(value))))
oil_summary <- ddply(melted, c("Type","variable"), summarize,
mean = mean(value))
View(oil_summary)
pumpkin <- ggplot(oil_summary[TYpe == "Pumpkin",],aes(x = "", y=mean, fill=variable)) +
geom_bar(width = 1, stat = "identity")
pumpkin <- ggplot(oil_summary[oil_summary$TYpe == "Pumpkin",],aes(x = "", y=mean, fill=variable))
pumpkin = pumpkin + geom_bar(width=1, stat = "identity")
pumpkin
oil_summary[oil_summary$Type == 'Pumpkin',]
ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x=factor(1), fill = variable)) +
geom_bar(width = 1) + coord_polar("y")
ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x=mean, fill = variable)) +
geom_bar(width = 1) + coord_polar("y")
ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x=factor(1), y=mean, fill = variable)) +
geom_bar(width = 1) + coord_polar("y")
ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x=factor(1), y=oil_summary$mean, fill = variable)) +
geom_bar(width = 1) + coord_polar("y")
ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x = "", y=oil_summary$mean, fill = variable)) +
geom_bar(width = 1) + coord_polar("y")
ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x = factor(1), y=oil_summary$mean, fill = variable)) +
geom_bar(width = 1) + coord_polar("y")
ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x = factor(Type), y=oil_summary$mean, fill = variable)) +
geom_bar(width = 1) + coord_polar("y")
ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x = "", y=oil_summary$mean, fill = variable)) +
geom_bar(width = 1) + coord_polar("y")
ggplot(oil_summary[oil_summary$Type == 'Pumpkin'], aes(x = "", y = oil_summary$mean, fill = variable)) + geom_bar(stat="identity" width = 1)
colnames(oil_summary) = c("Type","Fatty_Acid","Acid_Mean")
ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x = "", y = Acid_Mean, fill = Fatty_Acid)) + geom_bar(width = 1, stat = "identity")
pumpkin_pie <- ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x = "", y = Acid_Mean, fill = Fatty_Acid)) + geom_bar(width = 1, stat = "identity")
pumpkin_pie <- pumpkin_pie + coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(value*100), "%")), position = position_stack(vjust = 0.5))
pumpkin_pie
pumpkin_pie <- ggplot(oil_summary[oil_summary$Type == 'Pumpkin',], aes(x = "", y = Acid_Mean, fill = Fatty_Acid)) + geom_bar(width = 1, stat = "identity")
pumpkin_pie <- pumpkin_pie + coord_polar("y", start = 0)
pumpkin_pie
pumpkin_pie <- pumpkin_pie + labs(x = NULL, y = NULL, fill = NULL, title = "Mean Values for Fatty Acids in Pumpkin Oil")
pumpkin_pie
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
